<template>
    <div class="setUserInformation">
        <Header Head="{{Head}}"></Header>
        <scroller class="content" show-scrollbar="false" scroll-direction="vertical">
            <div class="userHeadImageBox"  ontouchend="{{bodyTouch()}}">
                <div class="UHIRound" ontouchend="{{headImageTouch()}}">
                    <image class="UHImage" src="{{headImageUrl()}}"></image>
                </div>
            </div>
            <div class="userInformationInputBox" repeat="{{informationItem in UserInformation.Text}}" ontouchend="{{bodyTouch()}}">
                <div class="normalInputBox" if="{{com_normalInputShow(informationItem)}}">
                    <text class="UITitle">{{informationItem.name}}</text>
                    <input id="{{informationItem.type}}" class="UIInput {{com_inputBorder(informationItem)}}"
                           type="text" value="{{informationItem.inputValue}}"
                           disabled="{{com_disabled()}}" autofocus="false" placeholder="{{informationItem.placeholder}}"
                           oninput="userInput(informationItem)"
                    >
                    <text class="errorTip">{{com_errorTip(informationItem)}}</text>
                </div>
                <div class="radioSelectBox" if="{{com_RadioSelectShow(informationItem)}}">
                    <text class="UITitle">{{informationItem.name}}</text>
                    <div class="radiosBox">
                        <div class="radioBox" onclick="radioSelect(informationItem,item)" repeat="{{item in informationItem.items}}">
                            <div class="round {{com_radioSelect(informationItem,item)}}"></div>
                            <text class="radioTxT">{{item.name}}</text>
                        </div>
                    </div>
                    <text class="errorTip">{{com_errorTip(informationItem)}}</text>
                </div>
                <div class="pickerBox" if="{{com_pickerShow(informationItem)}}">
                    <text class="UITitle">{{informationItem.name}}</text>
                    <text id="{{informationItem.type}}" class="UIInput {{com_pickerTxTColor(informationItem),com_inputBorder(informationItem)}}"
                          onclick="pickerInput(informationItem)"
                    >{{com_pickerValue(informationItem)}}</text>
                    <text class="errorTip">{{com_errorTip(informationItem)}}</text>
                </div>
            </div>
            <div class="buttonBox" ontouchend="{{bodyTouch()}}">
                <!--<div class="button {{com_changeTouch()}}" ontouchend="changeTouch()">-->
                    <!--<text class="buttonTxT {{com_changeTextTouch()}}">修改</text>-->
                <!--</div>-->
                <div class="button {{com_submitTouch()}}" ontouchend="submitTouch()">
                    <text class="buttonTxT {{com_submitTextTouch()}}">{{com_submitTexT()}}</text>
                </div>
            </div>
        </scroller>
        <div class="selectHeadImage {{com_headImageTouch()}}">
            <scroller class="headImagesBox" show-scrollbar="false" scroll-direction="horizontal">
                <image class="headImage" repeat="{{imageItem in HeadImages}}" src="{{getHeadImages(imageItem)}}" ontouchend="{{headImageSelect(imageItem)}}"></image>
            </scroller>
        </div>
    </div>
</template>

<script>
    import Header from '../components/header.we'
    import Router from '../router/router'
    import Apis from '../mixins/api'
    import Fetch from '../stream/fetch'
    const setInfo_user = new BroadcastChannel('SetUserInfo');
    module.exports = {
        data: {
            Head:{
                titleText:'个人简历',
                backShow:'visible',
                menuShow:'hidden'
            },
            LocalUserInfo:{},
            UserInformation:{
                headImage:{
                    type:"head",
                    url:"setHead.jpg",
                },
                Text:[
                    {
                        name:"真实姓名：",
                        type:"name",
                        placeholder:"请输入真实姓名",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    },
                    {
                        name:"性别：",
                        type:"sex",
                        placeholder:"请选择您的性别",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false,
                        items:[
                            {
                                name:'男',
                                value:'0'
                            },
                            {
                                name:'女',
                                value:'1'
                            }
                        ]
                    },
                    {
                        name:"出生日期：",
                        type:"birth",
                        placeholder:"请输入您的出生日期",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    },
                    {
                        name:"现所在地：",
                        type:"address",
                        placeholder:"请输入您的现所在地",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    },
                    {
                        name:"手机：",
                        type:"phone",
                        placeholder:"请输入您的手机号",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    },
                    {
                        name:"身份：",
                        type:"identity",
                        placeholder:"请选择您的身份",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false,
                        items:[
                            {
                                name:'学生党',
                                value:'0'
                            },
                            {
                                name:'上班族',
                                value:'1'
                            }
                        ]
                    },
                    {
                        name:"志愿服务年限：",
                        type:"time",
                        placeholder:"请输入您志愿服务年限",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    },
                    {
                        name:"自我介绍：",
                        type:"quotation",
                        placeholder:"请用一句话介绍自己",
                        inputValue:"",
                        isRule:true,
                        errorType:'',
                        isFocus:false
                    }
                ]
            },
            HeadImages:[
                {
                    type:"head",
                    url:"1.jpg"
                },
                {
                    type:"head",
                    url:"2.jpg"
                },
                {
                    type:"head",
                    url:"3.jpg"
                },
                {
                    type:"head",
                    url:"4.jpg"
                },
                {
                    type:"head",
                    url:"5.jpg"
                },
                {
                    type:"head",
                    url:"6.jpg"
                },
                {
                    type:"head",
                    url:"7.jpg"
                },
                {
                    type:"head",
                    url:"8.jpg"
                }
            ],
            IsHeadImageTouch:false,
            IsChange:true,
            IsChangeTouch:false
        },
        methods: {
            upDataUserInfo:function () {
                let _this = this;
                Apis.GETITEM("UserInfo",(event) => {
                    if(event.result == "success"){
                        _this.LocalUserInfo = (typeof event.data == "string") ? JSON.parse(event.data) : event.data;
                        _this.updataUserInformation();
                    }
                })
            },
            updataUserInformation:function () {
                let _this = this;
                let showUserInfo = _this.UserInformation;
                showUserInfo.headImage["url"] = _this.LocalUserInfo[showUserInfo.headImage.type];
                showUserInfo.Text.forEach((item) => {
                    item.inputValue = _this.LocalUserInfo[item.type];
                })
            },
            headImageUrl:function () {
                let _this = this;
                let userHead = _this.UserInformation.headImage;
                let url = '';
                if (userHead.url.indexOf('http') > -1){
                    url = userHead.url;
                }else {
                    url = Router.GETIMAGE(userHead.type,userHead.url);
                }
                return url;
            },
            bodyTouch:function () {
                let _this = this;
                let inputs = _this.UserInformation.Text;
                _this.IsHeadImageTouch = false;
                inputs.forEach((item) => {
                    if(item.type != 'sex' && item.type != 'identity' && item.type != 'birth'){
                        _this.$el(item.type).blur();
                    }
                })
            },
            headImageTouch:function () {
                if(!this.IsChange){
                    this.inputTip();
                    return;
                }
                this.IsHeadImageTouch = ! this.IsHeadImageTouch;
            },
//            changeTouch:function () {
//                let _this = this;
//                if(_this.IsChangeTouch){
//                    return;
//                }
//                _this.IsChangeTouch = true;
//            },
            submitTouch:function () {
                const _this = this;
                if(!_this.IsChange){
                    _this.inputTip();
                    return;
                }
                let body = 'json=';
                let result = {};
                let userInfo = _this.UserInformation;
                _this.bodyTouch();
                _this.IsChange = false;
                result["userName"] = _this.LocalUserInfo["userName"];
                result[userInfo.headImage.type] = userInfo.headImage.url;
                userInfo.Text.forEach((item) => {
                    result[item.type] = item.inputValue;
                });
                body += JSON.stringify(result);
                Apis.TIP(body);
                Fetch.FETCHPOST('setInfo',body,(res) => {
                    if(res.ok){
                        let return_Data = (typeof res.data == "string") ? JSON.parse(res.data) : res.data;
                        Apis.TIP(res.data);
                        if(return_Data["INFO"].code == "407"){
                            Apis.TIP("修改成功");
                            Apis.SETITEM("UserInfo",result,(event) => {
                                if(event.result == "success"){
                                    _this.IsChange = true;
                                    setInfo_user.postMessage("setInfoSuccess");
                                }
                            });
                        }else {
                            Apis.TIP("修改失败");
                        }
                    }
                })
            },
            getHeadImages:function (obj) {
                let url = Router.GETIMAGE(obj.type,obj.url);
                return url;
            },
            headImageSelect:function (obj) {
                let _this = this;
                _this.UserInformation.headImage.url = obj.url;
                _this.IsHeadImageTouch = false;
            },
            radioSelect:function (fatherObj, child0bj) {
                if(!this.IsChange){
                    this.inputTip();
                    return;
                }
              if(fatherObj.type == 'sex'){
                  fatherObj.inputValue = child0bj.value;
                  Apis.TOAST(fatherObj.inputValue);
              }else {
                  fatherObj.inputValue = child0bj.name;
                  Apis.TOAST(fatherObj.inputValue);
              }
            },
            userInput(obj,event){
                obj.inputValue = event.value;
                if(!this.errorStringTest(obj)){
                    obj.isRule = true;
                    obj.errorType = 'rightString';
                }else {
                    obj.isRule = false;
                    obj.errorType = 'errorString_rich';
                }
                switch (obj.type){
                    case 'phone':
                        this.phoneTest(obj);
                        break;
                    default:
                        break;
                }
            },
            errorStringTest(obj){
                let TxTRule = /[<].{0,1000}[>]/;
                return (TxTRule.test(obj.inputValue)) ? true : false;
            },
            phoneTest(obj){
                let phoneRule = /(13\d|14[57]|15[^4,\D]|17[678]|18\d)\d{8}|170[059]\d{7}/;
                if(phoneRule.test(obj.inputValue)){
                    obj.isRule = true;
                    obj.errorType = 'rightString';
                }else {
                    obj.isRule = false;
                    obj.errorType = 'errorPhone';
                }
                return (phoneRule.test(value)) ? true : false;
            },
            pickerInput(obj){
                const _this = this;
                if(!_this.IsChange){
                    _this.inputTip();
                    return;
                }
                switch (obj.type){
                    case 'birth':
                        _this.birthInput();
                        break;
                    default:
                        break;
                }
            },
            birthInput(){
                const _this = this;
                let options = {
                    value:"2017-01-01",
                    min:"1917-01-01"
                };
                let arr = [];
                Apis.PICKDATE(options,(res) => {
                   Apis.TOAST(res.result+','+res.data);
                   arr = res.data.split('-');
                   _this.UserInformation.Text[2].inputValue = arr.join("");
                })
            },
            inputTip:function () {
                Apis.TOAST("正在提交修改中，请耐心等待");
            },
            com_disabled:function () {
                return !this.IsChange;
            },
            com_inputBorder:function (obj) {
                return (obj.isRule) ? 'trueInput' : 'errorInput';
            },
            com_normalInputShow:function (obj) {
                let normalRule = /(name|address|phone|time|quotation)/;
                return (normalRule.test(obj.type)) ? true : false;
            },
            com_RadioSelectShow:function (obj) {
                let RadioRule = /(sex|identity)/;
                return (RadioRule.test(obj.type)) ? true : false;
            },
            com_pickerShow:function (obj) {
                let pickerRule = /(birth)/;
                return (pickerRule.test(obj.type)) ? true : false;
            },
            com_radioSelect:function (fatherObj,obj) {
                let result = '';
                switch (fatherObj.type){
                    case 'sex':
                        result = (fatherObj.inputValue == obj.value) ? 'radioSelect' : 'radioUnSelect';
                        break;
                    case 'identity':
                        result = (fatherObj.inputValue == obj.name) ? 'radioSelect' : 'radioUnSelect';
                        break;
                    default:
                        break;
                }
                return result;
            },
            com_inputStyle:function () {
                return (this.IsChange) ? "CanInput" : "UnInput";
            },
            com_pickerTxTColor(obj){
              if(obj.inputValue == ''){
                  return 'pickerUnInput';
              }else {
                  return 'pickerInput';
              }
            },
            com_pickerValue:function (obj) {
                const _this = this;
                if(obj.inputValue == ''){
                    return obj.placeholder;
                }else {
                    let result = '';
                    switch (obj.type){
                        case 'birth':
                            result = _this.com_birth(obj);
                            break;
                        default:
                            break;
                    }
                    return result;
                }
            },
            com_birth:function (obj) {
                if(obj.inputValue != ''){
                    let value = obj.inputValue;
                    let year = Number(value.substr(0,4));
                    let month = Number(value.substr(4,2));
                    let day = Number(value.substr(6,2));
                    return year+'年'+month+'月'+day+'日';
                }
            },
            com_errorTip:function (obj) {
                return Apis.ERRORTIP(obj);
            },
            com_headImageTouch:function () {
                return (this.IsHeadImageTouch) ? "selectHeadImageShow" : "selectHeadImageHidden";
            },
//            com_changeTouch:function () {
//                return (this.IsChangeTouch) ?  "UnTounch" : "change";
//            },
            com_submitTouch:function () {
                return (this.IsChange) ? "sumbit" : "UnTounch";
            },
//            com_changeTextTouch:function () {
//                return (this.IsChangeTouch) ?  "unTextTouch" : "textTouch";
//            },
            com_submitTextTouch:function () {
                return (this.IsChange) ?  "textTouch" : "unTextTouch";
            },
            com_submitTexT:function () {
                return  (this.IsChange) ?  "提交" : "正在提交";
            }
        },
        created:function () {
            this.upDataUserInfo();
        }
    }
</script>

<style scoped>
    .setUserInformation{
        flex: 1;
        flex-direction: column;
        align-items: center;
        background-color: #ffffff;

    }
    .content{
        flex: 1;
        flex-direction: column;
        align-items: center;
        overflow-y: auto;
    }
    .userHeadImageBox{
        justify-content: center;
        align-items: center;
        width: 750px;
        height: 400px;
    }
    .UHIRound {
        width: 200px;
        height: 200px;
        border-radius: 100px;
    }
    .UHImage{
        width: 200px;
        height: 200px;
    }
    .userInformationInputBox{
        flex-direction: column;
        align-items: center;
        width: 750px;
        padding: 20px;
    }
    .normalInputBox,.radioSelectBox,.pickerBox{
        width: 650px;
        height: 175px;
    }
    .UITitle{
        width: 650px;
        height: 50px;
        font-size: 30px;
        color: #000000;
        margin-top: 20px;
    }
    .UIInput{
        width: 650px;
        height: 80px;
        padding-left: 10px;
        font-size: 30px;
        line-height: 80px;
    }
    .trueInput{
        border-width: 2px;
        border-style: solid;
        border-top-color: transparent;
        border-left-color: transparent;
        border-right-color: transparent;
        border-bottom-color: #3f3f3f;
    }
    .errorInput{
        border-width: 2px;
        border-style: solid;
        border-top-color: #ff0000;
        border-left-color: #ff0000;
        border-right-color: #ff0000;
        border-bottom-color: #ff0000;
    }
    .CanInput{
        background-color: #ffffff;
        color:#000000;
    }
    .UnInput{
        background-color: #ffffff;
        color:#e3e3e3;
    }
    .errorTip{
        width:650px;
        height: 30px;
        line-height: 30px;
        font-size: 25px;
        color: #ff0000;
    }
    .radiosBox{
        flex-direction: row;
        justify-content: center;
        align-items: center;
        width: 450px;
        height: 80px;
    }
    .radioBox{
        flex: 1;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        width: 100%;
        height: 100%;
    }
    .round{
        width: 20px;
        height: 20px;
        border-radius: 10px;
        border-color: #5b5b5b;
        border-width: 2px;
        border-style: solid;
    }
    .radioSelect{
        background-color: #00ff00;
    }
    .radioUnSelect{
        background-color: #ffffff;
    }
    .radioTxT{
        margin-left: 20px;
        font-size: 30px;
    }
    .pickerUnInput{
        color: #afafaf;
    }
    .pickerInput{
        color: #000000;
    }
    .buttonBox{
        flex-direction: row;
        justify-content: center;
        align-items: center;
        width: 650px;
        height: 200px;
    }
    .button{
        justify-content: center;
        align-items: center;
        width: 300px;
        height: 100px;

        border-radius: 10px;
    }
    .buttonTxT{
        font-size: 50px;
        font-weight: bold;
        color: #000000;
    }
    .change{
        background-color: #ff6600;
    }
    .UnTounch{
        background-color: #eeeeee;
    }
    .sumbit{
        background-color: #00ff00;
    }
    .textTouch{
        color: #ffffff;
    }
    .unTextTouch{
        color: #000000;
    }
    .selectHeadImage{
        flex-direction: column;
        justify-content: center;
        width: 750px;
        height: 300px;
        background-color: rgba(0,0,0,0.7);
    }
    .selectHeadImageShow{
        position: fixed;
        bottom: 0;
    }
    .selectHeadImageHidden{
        position: absolute;
        left: -750px;
    }
    .headImagesBox{
        flex-direction: row;
        height: 200px;
    }
    .headImage{
        width: 200px;
        height: 200px;
        margin-right: 10px;
    }
</style>